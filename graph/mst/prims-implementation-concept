(*   In this we can start anywhere let us consider 0 and find minm weight edge connecting unconnected node to 0 and add it in pq 
and similarly new min weight node will add new unconnected node and its siblings .

At every step minimum edge weight unconnected nodes will be connected to current node   *)

#include <bits/stdc++.h>
using namespace std;

typedef pair<int, int> pii;
typedef tuple<int, int, int> edge; // {u, v, weight}

int primsMST(int n, vector<vector<pii>>& adj, vector<edge>& mst) {
    vector<bool> visited(n, false);
    priority_queue<tuple<int, int, int>, vector<tuple<int, int, int>>, greater<>> pq;

    //   we are storing parent for making mst edge matrix 
    // initialize values for starting node mostly it will be  0 and use parent if you need mst edge matrix if you donot then you can remove parent 
    
    pq.push({0, -1, 0}); // {weight, parent, node}
    int total_cost = 0;

    

    while (!pq.empty()) {
    
        auto [weight, parent, node] = pq.top();
        pq.pop();

        // check visited or not if not then mark it to optimize redundant calls 

Think of it like this:

Pushing is just adding options.

Popping is the moment of commitment — only proceed if the node hasn’t been added to the MST already.

        if (visited[node]) continue;      // ✅ THIS IS ESSENTIAL to remove redundant calls to already updated node 
        visited[node] = true;
        
        // add weight to total cost if you want it 
        total_cost += weight;

        // add edge to mst if you want it 
        if (parent != -1) {
            mst.push_back({parent, node, weight});
        }

        for (auto [neighbor, w] : adj[node]) {

                   // ✅ THIS IS OPTIMIZATION ONLY 

            if (!visited[neighbor]) {
                pq.push({w, node, neighbor});
            }
        }
    }

    return total_cost;
}

int main() {
    int n = 5;
    vector<vector<pii>> adj(n);

    // Add undirected edges
    adj[0].push_back({1, 2});
    adj[1].push_back({0, 2});

    adj[0].push_back({3, 6});
    adj[3].push_back({0, 6});

    adj[1].push_back({2, 3});
    adj[2].push_back({1, 3});

    adj[1].push_back({3, 8});
    adj[3].push_back({1, 8});

    adj[1].push_back({4, 5});
    adj[4].push_back({1, 5});

    adj[2].push_back({4, 7});
    adj[4].push_back({2, 7});

    vector<edge> mst;
    int cost = primsMST(n, adj, mst);

    cout << "Total MST cost: " << cost << "\n";
    cout << "MST Edges:\n";
    for (auto [u, v, w] : mst) {
        cout << u << " - " << v << " : " << w << "\n";
    }

    return 0;
}
