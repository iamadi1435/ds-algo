
1.For 2D grid with any values (0,1/positive value ) if the diection is not limited to two directions then we have to use dijikstra or 0-1 bfs to solve 
 shortest path problem of grid.
2. Dijikstra,0-1 Dfs,Bellman ford is available for both graphs and 2D matrix also.
3.BFS does not work for weighted graphs unless modified with a priority queue, which ultimately turns it into Dijkstra’s algorithm.
4.DFS would be highly inefficient because it would explore all possible paths, many of which would be unnecessary since they do not guarantee the shortest travel time. 
5.Generic way to think about graph problems:
  Start by trying BFS or DFS for traversal, reachability, and basic graph exploration.
  Then consider Union-Find (Disjoint Set Union), especially for cycle detection or connected components in undirected graphs.
  If the graph is directed, think about Kahn’s algorithm (Topological Sort) for ordering tasks or detecting cycles.
  For pathfinding/shortest path problems:
    Use Dijkstra’s algorithm for shortest paths with positive weights.
    Use Floyd-Warshall for all-pairs shortest paths (good for smaller graphs).
    Use Bellman-Ford if negative weights or negative cycles are involved.
  If none of these approaches work, consider DP with graphs, especially in DAGs using topological order.
6. Some problem you have two source and one destination where when you find path from src1 to dest and src2 to dest then return the sum that will not work 
   you have to find a common link between them and then from there you reach destination as simple as that .

   A good example on this is the problem : 
        2203. Minimum Weighted Subgraph With the Required Paths 
               https://leetcode.com/problems/minimum-weighted-subgraph-with-the-required-paths/description/?envType=problem-list-v2&envId=shortest-path

   Also look at the follow up asked by google :

   https://leetcode.com/discuss/post/6626514/google-l3-tpsmarch-by-bhima2001-x7jv/
