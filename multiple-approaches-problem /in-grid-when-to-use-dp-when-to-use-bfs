
https://leetcode.com/problems/minimum-obstacle-removal-to-reach-corner/


We can apply dp only if we have to move in restricted direcn (right,down) etc .

If you can move in all 4 directions (up, down, left, right), then:

You may revisit a cell, and the optimal path could include loops

Regular DP doesn’t work well — it needs graph algorithms like Dijkstra grid  or 0-1 BFS grid 



class Solution {
public:
    int minimumObstacles(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        deque<pair<int, int>> dq;
        vector<vector<int>> dist(n, vector<int>(m, INT_MAX));

        dq.push_front({0, 0});
        dist[0][0] = 0;

        vector<int> dx = {0, 0, 1, -1};
        vector<int> dy = {1, -1, 0, 0};

        while (!dq.empty()) {
            auto [x, y] = dq.front();
            dq.pop_front();

            for (int i = 0; i < 4; ++i) {
                int nx = x + dx[i], ny = y + dy[i];

                if (nx >= 0 && ny >= 0 && nx < n && ny < m) {
                    int cost = grid[nx][ny];
                    if (dist[nx][ny] > dist[x][y] + cost) {
                        dist[nx][ny] = dist[x][y] + cost;
                        if (cost == 1)
                            dq.push_back({nx, ny});
                        else
                            dq.push_front({nx, ny});
                    }
                }
            }
        }

        return dist[n - 1][m - 1];
    }
};
