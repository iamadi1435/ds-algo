                                     Approaches with problem 

1. Expanding or shrinking a window after getting a suitable window

  minimum window substring

2. Finding a suitablle window and then discarding all the elements from window and finding a fresh window again 

  https://leetcode.com/problems/count-subarrays-with-fixed-bounds/

3. count number of subarrays in which we use :   f(k) = f(<=k) - f(<=k-1)

  https://leetcode.com/problems/count-number-of-nice-subarrays/description/

4. 4 pointers approach l,r,start,end to calculate answer in a particular subarray

  https://leetcode.com/problems/count-number-of-nice-subarrays/description/

5. use of dequeue,queue and stack to store some values in subarrays - monotonic stack problems

 https://leetcode.com/problems/count-number-of-nice-subarrays/description/

6. Sliding window maximum/minimum - use of dequeue to get maximum from front and push and pop from back to maintain monotnic stack , dequeue is acting as monotonic stack or
   decreasing stack or increasing stack but we need maximum or minimum which is at front of dequeue.

https://leetcode.com/problems/sliding-window-maximum/description/

7. Always take index in stack or queue maintianing anything in it .

8. Sliding window fails in subarray when we need to find sum in subarray always keep mind .
